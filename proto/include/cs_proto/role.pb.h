// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_proto/role.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cs_5fproto_2frole_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cs_5fproto_2frole_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cs_5fproto_2frole_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cs_5fproto_2frole_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cs_5fproto_2frole_2eproto;
namespace cspkg {
class AccountLoginReq;
struct AccountLoginReqDefaultTypeInternal;
extern AccountLoginReqDefaultTypeInternal _AccountLoginReq_default_instance_;
class AccountLoginRes;
struct AccountLoginResDefaultTypeInternal;
extern AccountLoginResDefaultTypeInternal _AccountLoginRes_default_instance_;
}  // namespace cspkg
PROTOBUF_NAMESPACE_OPEN
template<> ::cspkg::AccountLoginReq* Arena::CreateMaybeMessage<::cspkg::AccountLoginReq>(Arena*);
template<> ::cspkg::AccountLoginRes* Arena::CreateMaybeMessage<::cspkg::AccountLoginRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cspkg {

// ===================================================================

class AccountLoginReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cspkg.AccountLoginReq) */ {
 public:
  inline AccountLoginReq() : AccountLoginReq(nullptr) {}
  ~AccountLoginReq() override;
  explicit constexpr AccountLoginReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountLoginReq(const AccountLoginReq& from);
  AccountLoginReq(AccountLoginReq&& from) noexcept
    : AccountLoginReq() {
    *this = ::std::move(from);
  }

  inline AccountLoginReq& operator=(const AccountLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountLoginReq& operator=(AccountLoginReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountLoginReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountLoginReq* internal_default_instance() {
    return reinterpret_cast<const AccountLoginReq*>(
               &_AccountLoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AccountLoginReq& a, AccountLoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountLoginReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountLoginReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountLoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccountLoginReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountLoginReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AccountLoginReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountLoginReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cspkg.AccountLoginReq";
  }
  protected:
  explicit AccountLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionKeyFieldNumber = 2,
    kAccountFieldNumber = 1,
  };
  // string session_key = 2;
  void clear_session_key();
  const std::string& session_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_key();
  PROTOBUF_NODISCARD std::string* release_session_key();
  void set_allocated_session_key(std::string* session_key);
  private:
  const std::string& _internal_session_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_key(const std::string& value);
  std::string* _internal_mutable_session_key();
  public:

  // fixed32 account = 1;
  void clear_account();
  uint32_t account() const;
  void set_account(uint32_t value);
  private:
  uint32_t _internal_account() const;
  void _internal_set_account(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cspkg.AccountLoginReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_key_;
  uint32_t account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cs_5fproto_2frole_2eproto;
};
// -------------------------------------------------------------------

class AccountLoginRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cspkg.AccountLoginRes) */ {
 public:
  inline AccountLoginRes() : AccountLoginRes(nullptr) {}
  ~AccountLoginRes() override;
  explicit constexpr AccountLoginRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountLoginRes(const AccountLoginRes& from);
  AccountLoginRes(AccountLoginRes&& from) noexcept
    : AccountLoginRes() {
    *this = ::std::move(from);
  }

  inline AccountLoginRes& operator=(const AccountLoginRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountLoginRes& operator=(AccountLoginRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountLoginRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountLoginRes* internal_default_instance() {
    return reinterpret_cast<const AccountLoginRes*>(
               &_AccountLoginRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AccountLoginRes& a, AccountLoginRes& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountLoginRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountLoginRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountLoginRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccountLoginRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountLoginRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AccountLoginRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountLoginRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cspkg.AccountLoginRes";
  }
  protected:
  explicit AccountLoginRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // fixed32 account = 1;
  void clear_account();
  uint32_t account() const;
  void set_account(uint32_t value);
  private:
  uint32_t _internal_account() const;
  void _internal_set_account(uint32_t value);
  public:

  // int32 result = 2;
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cspkg.AccountLoginRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t account_;
  int32_t result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cs_5fproto_2frole_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AccountLoginReq

// fixed32 account = 1;
inline void AccountLoginReq::clear_account() {
  account_ = 0u;
}
inline uint32_t AccountLoginReq::_internal_account() const {
  return account_;
}
inline uint32_t AccountLoginReq::account() const {
  // @@protoc_insertion_point(field_get:cspkg.AccountLoginReq.account)
  return _internal_account();
}
inline void AccountLoginReq::_internal_set_account(uint32_t value) {
  
  account_ = value;
}
inline void AccountLoginReq::set_account(uint32_t value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:cspkg.AccountLoginReq.account)
}

// string session_key = 2;
inline void AccountLoginReq::clear_session_key() {
  session_key_.ClearToEmpty();
}
inline const std::string& AccountLoginReq::session_key() const {
  // @@protoc_insertion_point(field_get:cspkg.AccountLoginReq.session_key)
  return _internal_session_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountLoginReq::set_session_key(ArgT0&& arg0, ArgT... args) {
 
 session_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cspkg.AccountLoginReq.session_key)
}
inline std::string* AccountLoginReq::mutable_session_key() {
  std::string* _s = _internal_mutable_session_key();
  // @@protoc_insertion_point(field_mutable:cspkg.AccountLoginReq.session_key)
  return _s;
}
inline const std::string& AccountLoginReq::_internal_session_key() const {
  return session_key_.Get();
}
inline void AccountLoginReq::_internal_set_session_key(const std::string& value) {
  
  session_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AccountLoginReq::_internal_mutable_session_key() {
  
  return session_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AccountLoginReq::release_session_key() {
  // @@protoc_insertion_point(field_release:cspkg.AccountLoginReq.session_key)
  return session_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AccountLoginReq::set_allocated_session_key(std::string* session_key) {
  if (session_key != nullptr) {
    
  } else {
    
  }
  session_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cspkg.AccountLoginReq.session_key)
}

// -------------------------------------------------------------------

// AccountLoginRes

// fixed32 account = 1;
inline void AccountLoginRes::clear_account() {
  account_ = 0u;
}
inline uint32_t AccountLoginRes::_internal_account() const {
  return account_;
}
inline uint32_t AccountLoginRes::account() const {
  // @@protoc_insertion_point(field_get:cspkg.AccountLoginRes.account)
  return _internal_account();
}
inline void AccountLoginRes::_internal_set_account(uint32_t value) {
  
  account_ = value;
}
inline void AccountLoginRes::set_account(uint32_t value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:cspkg.AccountLoginRes.account)
}

// int32 result = 2;
inline void AccountLoginRes::clear_result() {
  result_ = 0;
}
inline int32_t AccountLoginRes::_internal_result() const {
  return result_;
}
inline int32_t AccountLoginRes::result() const {
  // @@protoc_insertion_point(field_get:cspkg.AccountLoginRes.result)
  return _internal_result();
}
inline void AccountLoginRes::_internal_set_result(int32_t value) {
  
  result_ = value;
}
inline void AccountLoginRes::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:cspkg.AccountLoginRes.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cspkg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cs_5fproto_2frole_2eproto
